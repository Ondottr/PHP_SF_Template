"use strict";

const path = require( "path" );
const Dotenv = require( "dotenv-webpack" );
const TerserPlugin = require( "terser-webpack-plugin" );
const JavaScriptObfuscator = require( "webpack-obfuscator" );
const { CleanWebpackPlugin } = require( "clean-webpack-plugin" );
const dotenv = require( "dotenv" );

module.exports = ( env ) => {
  dotenv.config();
  const isProduction = env.mode === "production";

  return {
    mode: env.mode,
    entry: "./src/index.js",
    cache: Boolean( env.cache ),
    devtool: isProduction ? "source-map" : "inline-source-map",

    performance: {
      hints: isProduction ? false : "warning",
    },

    optimization: {
      minimize: isProduction,
      minimizer: [
        isProduction &&
        new TerserPlugin( {
          parallel: true,
          terserOptions: {
            format: {
              comments: false,
            },
            compress: {
              drop_console: true,
            },
          },
          extractComments: false,
        } ),
      ].filter( Boolean ),
    },

    output: {
      filename: isProduction
        ? `[name].[contenthash].js`
        : "app.js",
      path: path.resolve( __dirname, "public/build" ),
      library: "app",
    },

    watchOptions: {
      aggregateTimeout: 100,
    },

    plugins: [
      new CleanWebpackPlugin( {
        cleanStaleWebpackAssets: false, // Prevent removing files not generated by this webpack build
        cleanOnceBeforeBuildPatterns: [
          "**/*",
          "!bootstrap.min.js",
          "!jquery-3.6.0.min.js",
        ],
      } ),
      new Dotenv( {
        path: "./.env",
        safe: true,
        allowEmptyValues: true,
        systemvars: true,
      } ),
      isProduction && new JavaScriptObfuscator( {
        domainLock: [
          'localhost',
          '127.0.0.1:7000',
          'nations-original.com',
        ],
        debugProtection: true,
        disableConsoleOutput: true,
        compact: true,
        controlFlowFlattening: false,
        deadCodeInjection: false,
        debugProtectionInterval: 0,
        identifierNamesGenerator: 'hexadecimal',
        log: false,
        numbersToExpressions: false,
        renameGlobals: false,
        selfDefending: true,
        simplify: true,
        splitStrings: false,
        stringArray: true,
        stringArrayCallsTransform: false,
        stringArrayEncoding: [],
        stringArrayIndexShift: true,
        stringArrayRotate: true,
        stringArrayShuffle: true,
        stringArrayWrappersCount: 1,
        stringArrayWrappersChainedCalls: true,
        stringArrayWrappersParametersMaxCount: 2,
        stringArrayWrappersType: 'variable',
        stringArrayThreshold: 0.75,
        unicodeEscapeSequence: false,
      } ),
    ].filter( Boolean ),

    module: {
      rules: [
        {
          test: /\.s[ac]ss$/i,
          use: [
            "style-loader",
            "css-loader",
            "sass-loader",
          ],
        },
      ],
    },
    resolve: {
      extensions: [ ".js" ]
    },
  };
};
